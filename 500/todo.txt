  type ParseInt<T> = T extends `${infer X extends number}` ? X :  never

  type RemoveLeadingZeros<T extends string> = T extends '0' ? T : (
    T extends `${0}${infer Rest}` ? RemoveLeadingZeros<Rest> : T
  )
  
  type InnerMinusOne<T extends string> = T extends `${infer X extends number}${infer Y}` ? (
    X extends 0 ? `9${InnerMinusOne<Y>}` : `${[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8][X]}${Y}`
  ) : ''
  
  type Reverse<T extends string> = T extends `${infer X}${infer Y}` ? `${Reverse<Y>}${X}` : ''
  
  type MinusOne<T extends number> = ParseInt<RemoveLeadingZeros<Reverse<InnerMinusOne<Reverse<`${T}`>>>>>
  
  type InnerGreaterThan<T extends number, U extends number> = T extends U ? true : (
    T extends 0 ? false : InnerGreaterThan<MinusOne<T>, U>
  )

  type GreaterThan<T extends number, U extends number> = T extends U ? false : (
    U extends 0 ? true : InnerGreaterThan<T, U>
  )

  //===================================================================================

type StringToArray<T extends string> = T extends `${infer L extends number}${infer Rest}` ? [L, ...StringToArray<Rest>] : []
type CreateArrayByNumber<T extends number, R extends any[] = []> = R['length'] extends T ? R : CreateArrayByNumber<T, [...R, undefined]>
type CompareOneDigit<T extends number, U extends number> = T extends U ? false :  CreateArrayByNumber<T> extends [...CreateArrayByNumber<U>, ...infer _] ? true : false
type CompareAllNumber<T extends any[], U extends any[], CompareCount extends any[] = []> = T['length'] extends U['length'] ? CompareCount['length'] extends T['length'] ? false : CompareOneDigit<T[CompareCount['length']], U[CompareCount['length']]> extends true ? true : CompareAllNumber<T, U, [...CompareCount, 1]> : T[U['length']] extends undefined ? false : true
type GreaterThan<T extends number, U extends number> = CompareAllNumber<StringToArray<`${T}`>, StringToArray<`${U}`>>

//=================================================================

type ArrayOfLengt<N extends number, A extends any[] = []> =
  A["length"] extends N ? A : ArrayOfLengt<N, [any, ...A]>

type DGreaterThan<
  T extends number, 
  U extends number,
  TA extends any[] = ArrayOfLengt<T>,
  UA extends any[] = ArrayOfLengt<U>
> = 
  TA extends [any, ...infer TR] ?
    UA extends [any, ...infer UR] ?
      DGreaterThan<number, number, TR, UR> :
    true :
  false

type Length<T extends string, A extends string[] = []> =
  T extends `${infer F extends string}${infer R extends string}` 
    ? Length<R, [...A, F]>
    : A["length"]

type GreaterThan<
  T extends number, 
  U extends number,
  TS extends string = `${T}`,
  US extends string = `${U}`
> = 
  DGreaterThan<Length<TS>, Length<US>> extends true ? true :
  DGreaterThan<Length<US>, Length<TS>> extends true ? false :
  TS extends `${infer TF extends number}${infer TR extends string}` ?
    US extends `${infer UF extends number}${infer UR extends string}` ?
      DGreaterThan<TF, UF> extends true ? true :
      DGreaterThan<UF, TF> extends true ? false :
      GreaterThan<number, number, TR, UR> :
    false :
  false
  //==================================================================